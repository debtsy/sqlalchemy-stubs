[case testSchemaMetaData]
from sqlalchemy import MetaData, create_engine
from sqlalchemy.engine import Connection
from sqlalchemy.engine.url import make_url

m = MetaData()
e = create_engine('postgresql://foo')
c = Connection(e)
m.bind = 'postgresql://foo'
m.bind = make_url('postgresql://foo')
reveal_type(m.bind)  # E: Revealed type is 'Union[sqlalchemy.engine.base.Engine, sqlalchemy.engine.base.Connection, None]'
m.bind = e
reveal_type(m.bind)  # E: Revealed type is 'sqlalchemy.engine.base.Engine'
m.bind = c
reveal_type(m.bind)  # E: Revealed type is 'sqlalchemy.engine.base.Connection'
[out]

[case testSequenceType]
# Regression test - schema.Sequence is not typing.Sequence
from sqlalchemy.sql.schema import ForeignKeyConstraint
ForeignKeyConstraint(["foo", "bar"], ["table.foo", "table.baz"])
[out]

[case testColumnQueriesAreChecked]
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy import Column, Integer, String

Base = declarative_base()

class User(Base):
    __tablename__ = 'users'
    id = Column(Integer, primary_key=True)
    name = Column(String)

user: User
reveal_type(user.id)  # E: Revealed type is 'builtins.int*'
reveal_type(User.name)  # E: Revealed type is 'sqlalchemy.sql.schema.Column[Union[builtins.str*, None]]'
User.name.foo  # E: "Column[Optional[str]]" has no attribute "foo"
User.name.ilike  # works just fine
User.name.ilike('hi')  # works just fine
User.name.ilike(5)  # E: Argument 1 to "ilike" of "ColumnOperators" has incompatible type "int"; expected "str"
[out]